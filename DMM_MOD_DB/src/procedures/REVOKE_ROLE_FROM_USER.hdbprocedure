PROCEDURE "REVOKE_ROLE_FROM_USER" (IN role_name NVARCHAR(256), IN grantee NVARCHAR(256))
LANGUAGE SQLSCRIPT
SQL SECURITY DEFINER
AS
	v_statement NVARCHAR(1024);
	hdi_oo NVARCHAR(256);
	role_schema NVARCHAR(256);
	counter INTEGER := 0;
	error_code INTEGER;
	error_message NVARCHAR(256);
BEGIN
	DECLARE USERNOTEXIST CONDITION FOR SQL_ERROR_CODE 11001;
	DECLARE REVOKESELF CONDITION FOR SQL_ERROR_CODE 11002;
	DECLARE ROLENOTEXIST CONDITION FOR SQL_ERROR_CODE 11003;
	DECLARE EXIT HANDLER FOR USERNOTEXIST RESIGNAL;
	DECLARE EXIT HANDLER FOR REVOKESELF RESIGNAL;
	DECLARE EXIT HANDLER FOR ROLENOTEXIST RESIGNAL;
	hdi_oo := ::CURRENT_OBJECT_SCHEMA || '#OO';
	role_schema := ::CURRENT_OBJECT_SCHEMA;
	-- check input user
	SELECT COUNT (*) INTO counter FROM (select * from "sys.users" where USER_NAME = :grantee);
	if (counter != 1) then
		SIGNAL USERNOTEXIST SET MESSAGE_TEXT = 'User does not exist: ' || :grantee;
	end if;
	-- check if role exists in this HDI container
	SELECT COUNT (*) INTO counter FROM (select * from "sys.roles" where ROLE_NAME = :role_name and ROLE_SCHEMA_NAME = :role_schema and CREATOR = :hdi_oo);
	if (counter != 1) then
		SIGNAL ROLENOTEXIST SET MESSAGE_TEXT = 'Role does not exist: ' || :role_name;
	end if;
	-- check for self revoke
	if :grantee = SESSION_USER then
		SIGNAL REVOKESELF SET MESSAGE_TEXT = 'Self-revoke not allowed!';
	end if;
	-- make the statement
	v_statement := 'REVOKE "' || ESCAPE_DOUBLE_QUOTES(:role_schema) || '"."' || ESCAPE_DOUBLE_QUOTES(:role_name) || '" FROM "' || ESCAPE_DOUBLE_QUOTES(:grantee) || '"';
	-- run the statement
	EXEC v_statement;
END;